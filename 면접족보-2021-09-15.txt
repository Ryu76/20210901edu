1.아래의 사칙연산 계산기를 프로그래밍하시오.

출력========================== 

첫 번째 숫자를 입력하세요.
90
연산 기호를 입력하세요.
+
두 번째 숫자를 입력하세요.
65
155
종료하시겠습니까? 종료:y 계속:n
n
첫 번째 숫자를 입력하세요.
90
연산 기호를 입력하세요.
-
두 번째 숫자를 입력하세요.
56
34
종료하시겠습니까? 종료:y 계속:n
y
종료입니다.

import java.util.Scanner;

class Auto {

	private int n1;
	private int n2;
	private String opr;
	private double re = 0;
	
	Scanner sc = new Scanner(System.in);
	
	
	public int N1() {
		System.out.println("첫번째 숫자를 입력해 주세요.");
		this.n1 = sc.nextInt();
		return n1;
	}

	public int N2() {
		System.out.println("두번째 숫자를 입력해 주세요.");
		this.n2 = sc.nextInt();
		return n2;
	}

	public String Opr() {
		System.out.println("연산 기호를 입력해 주세요.");
		this.opr = sc.next();
		return opr;
	}

	public void show() {
		if (opr.equals("-")) {
			re = n1 - n2;
		} else if (opr.equals("+")) {
			re = n1 + n2;
		} else if (opr.equals("*")) {
			re = n1 * n2;
		} else if (opr.equals("/")) {
			re = n1 / n2;
		} else if (opr.equals("%")) {
			re = n1 % n2;
		}
		System.out.println(n1+opr+n2+" = "+re);
	}
	

}

public class Jokbo {

	public static void main(String[] args) {
		Scanner sc1 = new Scanner(System.in);
		String con;
		Auto at = new Auto();
		while (true) {
			at.N1();
			at.Opr();
			at.N2();
			at.show();
			System.out.println("계속 할거면 y 끝낼거면 n을 입력해 주세요.");
			con = sc1.next();
			if(con.equals("y"))
				continue;
			else 
				break;
		}
		sc1.close();

	}

}


2.

2. 랜덤 숫자 맞추기 게임을 짜시오.

남은 횟수 : 10회 에서 시작

1-100사이의 숫자 중에 숫자 맞추기

//아래의 랜덤함수를 사용 할것
(int)((Math.random()*100)+1); 

==========================
1~100 사이의 숫자를 입력하세요.
남은 횟수 : 10
50
UP
남은 횟수 : 9
65
UP
남은 횟수 : 8
80
DOWN
남은 횟수 : 7
75
DOWN
남은 횟수 : 6
73
DOWN
남은 횟수 : 5
70
UP
남은 횟수 : 4
71
축하합니다. 7회 만에 맞추셨습니다.
프로그램을 종료합니다.

import java.util.Scanner;

class Random {
	Scanner sc = new Scanner(System.in);
	private int rnd = (int) ((Math.random() * 100) + 1);
	private int num = 0;

	public void rnd() {
		System.out.println("숫자를 입력해 주세요.");
		for (int i = 1; i <= 10; i++) {
			num = sc.nextInt();
			if (rnd == num)
				System.out.println("축하합니다 " + i + "번 만에 맞추셨습니다.");
			else if (rnd > num)
				System.out.println("UP");
			else
				System.out.println("DOWN");
		}
	}
	
}

public class Rnd {

	public static void main(String[] args) {

		Random rd = new Random();
		rd.rnd();
	}

}


3 . 아래와 같이 출력이 나오도록 프로그래밍 하시오.
Player 객체를 완성하시오.

main(){

Player p1 = new Player()
Player p2 = new Player()
Player p3 = new Player()
Player p4 = new Player()

System.out.println(Player.instance);

}

출력:
4

class Player{
	
	static int instance = 0;
	
	Player(){
		instance++;
	}
}
public class Jokbo4 {
	public static void main(String[] args) {
		
		Player p1 = new Player();
		Player p2 = new Player();
		Player p3 = new Player();
		Player p4 = new Player();

		System.out.println(Player.instance);
	}
}


4. static 변수의 다른 용어 3가지를 말해 보시오.
정적변수 = 공유변수 = class 변수	

5. static 변수의 접근 방법은?
static이 있는 함수에서만 사용가능
static이 붙은 변수(클래스 변수)는 클래스가 메모리에 올라갈 때 이미 자동적으로 생성되어있다.
인스턴스를 생성하지 않아도 사용이 가능하다
6.. 클래스(static) 변수의 활용의 예를 드시오.
Math.PI
7. 스태틱 함수에 인스턴스 라면이 올수 없는 이유는?
스태틱함수는 이미 메모리에 올려져있기 때문에 인스턴스 라면을 쓰면 오류가 난다.
인스턴스 라면은 객체를 생성할때 메모리에 올라가기 때문에 만들어지는 순서가 어긋난다.

8. 인스턴스 함수 안에 static 변수와 함수가 올 수 있는 이유는?
static이 붙은 메서드는 인스턴스 생성 없이 호출 가능한 반면, 인스턴스 변ㄴ수는 인스턴스가 생성해야만 만들어지기 때문에
static이 붙은 메서드(클래스 메서드)를 호출할때 인스턴스가 생성되어 있을수 있어서 static이 붙은 메서드에서
인스턴스 변수의 사용을 허용하지 않는다.





